{"version":3,"sources":["index.js"],"names":["Square","state","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","style","this","props","gameOver","display","className","class","Component","Board","snake","boxClass","squareArray","x","y","snakeArray","JSON","stringify","food","push","key","id","App","startGame","direction","FoodPosition","Math","floor","random","_this2","setState","foodCollision","snakeCopy","parse","lastPosition","length","newCell","wallCollision","snakeCollision","endGame","clearInterval","moveSnake","console","log","copy","pop","unshift","setInterval","handleKeys","e","keyCode","reset","window","location","reload","document","addEventListener","onClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.04bece17.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nclass Square extends Component {\n    state = {}\n    render() {\n        return (\n            <div style={!this.props.gameOver ? { display: \"block\" } : { display: \"none\" }} className={this.props.class}>\n\n            </div>\n        );\n    }\n};\n\n\n\n\n\nclass Board extends Component {\n\n    render() {\n\n        let { snake } = this.props;\n        let squareArray = [];\n        let boxClass;\n\n        for (let x = 0; x < 20; x++) {\n            for (let y = 0; y < 20; y++) {\n\n                let snakeArray = [x, y];\n                boxClass = \"square normalSquare\";\n\n                for (let x in this.props.snake) {\n                    if (JSON.stringify(snakeArray) === JSON.stringify(this.props.snake[x])) {\n                        boxClass = \"square snakeSquare\";\n                    }\n                }\n\n                if (x === this.props.food[0] && y === this.props.food[1]) {\n                    boxClass = \"square foodSquare\";\n                }\n\n                squareArray.push(\n                    <Square\n                        key={x + \"_\" + y}\n                        id={x + \"_\" + y}\n                        class={boxClass}\n                        gameOver={this.props.gameOver}\n                    />\n                )\n            }\n        }\n        return (\n            <div className=\"board\">\n                {squareArray}\n            </div>\n        );\n    }\n}\n\n\nclass App extends Component {\n    state = {\n        snake: [],\n        food: [],\n        startGame: false,\n        direction: 39,\n        gameOver: false\n    }\n\n    FoodPosition = () => {\n        let x = Math.floor(Math.random() * 19);\n        let y = Math.floor(Math.random() * 19);\n        let food = [x, y];\n\n        this.setState({\n            food: food\n        });\n    }\n\n    foodCollision = () => {\n\n        let { snake } = this.state;\n        let { food } = this.state\n\n        if (JSON.stringify(food) === JSON.stringify(snake[0])) {\n            this.FoodPosition();\n\n            let snakeCopy = JSON.parse(JSON.stringify(this.state.snake));\n            let lastPosition = snakeCopy[snakeCopy.length - 1];\n\n            if (this.state.direction === 39) {\n                let newCell = [lastPosition[0], lastPosition[1] - 1];\n                snakeCopy.push(newCell);\n            }\n\n\n            if (this.state.direction === 37) {\n                let newCell = [lastPosition[0], lastPosition[1] + 1];\n                snakeCopy.push(newCell);\n            }\n\n\n            if (this.state.direction === 38) {\n                let newCell = [lastPosition[0] - 1, lastPosition[1]];\n                snakeCopy.push(newCell);\n            }\n\n\n            if (this.state.direction === 40) {\n                let newCell = [lastPosition[0] + 1, lastPosition[1]];\n                snakeCopy.push(newCell);\n            }\n\n            this.setState({\n                snake: snakeCopy\n            })\n        }\n\n    }\n\n\n    wallCollision = () => {\n\n        let { snake } = this.state;\n        let snakeCopy = JSON.parse(JSON.stringify(snake));\n        // console.log(snakeCopy[0][0]);\n\n        //Wall right\n        if (snakeCopy[0][1] > 19) {\n            snakeCopy[0][1] = 0;\n        }\n\n        //Wall Left \n        if (snakeCopy[0][1] < 0) {\n            snakeCopy[0][1] = 19\n        }\n\n        //Wall Top\n        if (snakeCopy[0][0] < 0) {\n            snakeCopy[0][0] = 19;\n        }\n\n        //Wall Bottom \n        if (snakeCopy[0][0] > 19) {\n            snakeCopy[0][0] = 0\n        }\n\n        this.setState({\n            snake: snakeCopy\n        })\n    }\n\n    snakeCollision = () => {\n        let snakeCopy = JSON.parse(JSON.stringify(this.state.snake));\n\n        for (let x = 1; x < snakeCopy.length; x++) {\n            if (JSON.stringify(snakeCopy[0]) === JSON.stringify(snakeCopy[x])) {\n                this.setState({\n                    gameOver: true\n                })\n            }\n        }\n    }\n\n\n    endGame = () => {\n        if (this.state.gameOver) {\n            clearInterval(this.moveSnake);\n        }\n    }\n\n    moveSnake = () => {\n        console.log(\"moving snake\");\n        let { snake } = this.state;\n        let snakeSize = snake.length - 1;\n        let firstCell = snake[0][0];\n        let copy = JSON.parse(JSON.stringify(this.state.snake));\n\n\n        if (this.state.direction === 37) {\n            let newCell = [snake[0][0], snake[0][1] - 1];\n            copy.pop();\n            copy.unshift(newCell);\n        }\n\n\n        if (this.state.direction === 39) {\n            let newCell = [snake[0][0], snake[0][1] + 1];\n            copy.pop();\n            copy.unshift(newCell);\n        }\n\n\n        if (this.state.direction === 40) {\n            let newCell = [snake[0][0] + 1, snake[0][1]];\n            copy.pop();\n            copy.unshift(newCell);\n        }\n\n        if (this.state.direction === 38) {\n            let newCell = [snake[0][0] - 1, snake[0][1]];\n            copy.pop();\n            copy.unshift(newCell);\n        }\n\n        this.setState({\n            snake: copy\n        })\n\n        this.foodCollision();\n        this.wallCollision();\n        this.snakeCollision();\n        this.endGame();\n    };\n\n\n    startGame = () => {\n\n        console.log(\"restarted\");\n\n        this.setState({\n            gameOver: false,\n            startGame: true,\n            snake: [\n                [5, 5],\n                [5, 4],\n                [5, 3],\n                [5, 2],\n                [5, 1]\n            ],\n            food: [2, 11],\n        });\n\n        this.moveSnake = setInterval(this.moveSnake, 110);\n        console.log(\"after\");\n    }\n\n\n    handleKeys = (e) => {\n\n        if (e.keyCode === 37) {\n            this.setState({\n                direction: 37\n            })\n        }\n\n        else if (e.keyCode === 38) {\n            this.setState({\n                direction: 38\n            })\n        }\n\n        else if (e.keyCode === 39) {\n            this.setState({\n                direction: 39\n            })\n        }\n\n        else if (e.keyCode === 40) {\n            this.setState({\n                direction: 40\n            })\n        }\n    }\n\n\n    componentWillMount() {\n        document.addEventListener(\"keydown\", this.handleKeys);\n    }\n\n\n    reset = () => {\n        window.location.reload();\n    }\n\n    render() {\n\n        let gameOver;\n\n        return (\n            <div className=\"app\">\n                <h1></h1>\n                <div id=\"boardWrap\">\n                    <div style={this.state.startGame ? { display: \"block\" } : { display: \"none\" }} id=\"score\">Score: {this.state.snake.length - 5}</div>\n\n                    <div id=\"gameOver\" style={this.state.gameOver ? { display: \"block\" } : { display: \"none\" }} className=\"overlay\">\n                        <h2 className=\"h2\">Game Over</h2>\n                        <h3 className=\"h2\">You got {this.state.snake.length - 5} points!</h3>\n                        <button id=\"reset\" onClick={this.reset} className=\"content\">Replay</button>\n                    </div>\n\n\n\n                    <div style={!this.state.startGame ? { display: \"block\" } : { display: \"none\" }} className=\"overlay\">\n                        <button onClick={this.startGame} className=\"content\">Play Game</button>\n                    </div>\n\n                    <Board startGame={this.state.startGame} food={this.state.food} snake={this.state.snake} />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}